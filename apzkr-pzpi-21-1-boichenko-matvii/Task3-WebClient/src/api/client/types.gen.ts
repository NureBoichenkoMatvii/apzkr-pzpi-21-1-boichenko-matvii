// This file is auto-generated by @hey-api/openapi-ts

export type BaseMessage_MachineConnection_ = {
    topic: string;
    qos?: number;
    timestamp: number;
    msg_timestamp: number;
    payload?: MachineConnection | null;
};

export type BaseMessage_MachineStatusInfo_ = {
    topic: string;
    qos?: number;
    timestamp: number;
    msg_timestamp: number;
    payload?: MachineStatusInfo | null;
};

export type BaseMessage_OrderEvent_ = {
    topic: string;
    qos?: number;
    timestamp: number;
    msg_timestamp: number;
    payload?: OrderEvent | null;
};

export type BaseMessage_RegistrationRequest_ = {
    topic: string;
    qos?: number;
    timestamp: number;
    msg_timestamp: number;
    payload?: RegistrationRequest | null;
};

export type BearerResponse = {
    access_token: string;
    token_type: string;
};

export type Body_auth_jwt_login_api_v1_auth_jwt_login_post = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type Body_reset_forgot_password_api_v1_auth_forgot_password_post = {
    email: string;
};

export type Body_reset_reset_password_api_v1_auth_reset_password_post = {
    token: string;
    password: string;
};

export type Body_verify_request_token_api_v1_auth_request_verify_token_post = {
    email: string;
};

export type Body_verify_verify_api_v1_auth_verify_post = {
    token: string;
};

export type CalculateDistanceRequest = {
    pickup_point1_id: string;
    pickup_point2_id: string;
};

export type CreateMachineDto = {
    name: string;
    mac: string;
    location: MachineLocation;
    admin_user_id: string;
    status?: MachineStatus;
    last_maintenance_date?: string | null;
};

export type CreateMachineDtoPartial = {
    name?: string | null | null;
    mac?: string | null | null;
    location?: MachineLocation | null | null;
    admin_user_id?: string | null | null;
    status?: MachineStatus;
    last_maintenance_date?: string | null;
};

export type CreateMachineMedicineSlotDto = {
    machine_id: string;
    medicine_id: string;
    total_count: number;
    reserved_count: number;
};

export type CreateMachineMedicineSlotDtoPartial = {
    machine_id?: string | null | null;
    medicine_id?: string | null | null;
    total_count?: number | null | null;
    reserved_count?: number | null | null;
};

export type CreateMachinePickupPointDto = {
    machine_id: string;
    pickup_point_id: string;
    arrival_at: string;
    departure_at: string;
    deliver_orders: boolean;
};

export type CreateMachinePickupPointDtoPartial = {
    machine_id?: string | null | null;
    pickup_point_id?: string | null | null;
    arrival_at?: string | null | null;
    departure_at?: string | null | null;
    deliver_orders?: boolean | null | null;
};

export type CreateMachineStatisticDto = {
    machine_id: string;
    info: {
        [key: string]: unknown;
    };
};

export type CreateMedicineDto = {
    type: MedicineType;
    name: string;
    description: string;
    price: number;
    currency: Currencies;
    prescription_needed: boolean;
    is_available: boolean;
};

export type CreateMedicineDtoPartial = {
    type?: MedicineType | null | null;
    name?: string | null | null;
    description?: string | null | null;
    price?: number | null | null;
    currency?: Currencies | null | null;
    prescription_needed?: boolean | null | null;
    is_available?: boolean | null | null;
};

export type CreateOrderDto = {
    user_id: string;
    machine_id: string | null;
    pickup_point_id: string;
    status: OrderStatus;
    payment_currency: Currencies;
    medicines?: Array<MedicineInfoDto>;
};

export type CreatePickupPointDto = {
    location: Location;
    is_available: boolean;
};

export type CreatePickupPointDtoPartial = {
    location?: Location | null | null;
    is_available?: boolean | null | null;
};

export type Currencies = 'USD' | 'EUR' | 'UAH';

export type DistanceTimeResponse = {
    distance: number;
    time_hours: number;
};

export type ErrorModel = {
    detail: string | {
    [key: string]: (string);
};
};

export type GetOrderByIdResponseDto = {
    id: string;
    user_id: string;
    machine_id: string | null;
    pickup_point_id: string;
    status: OrderStatus;
    payment_currency: Currencies;
    medicines?: Array<MedicineInfoDto>;
    payment_amount: number;
    created_at: string;
    updated_at: string;
    order_medicines: Array<OrderMedicineResponseDto>;
    pickup_point: PickupPointResponseDto;
    machine?: MachineResponseDto | null;
    machine_pickup_point?: MachinePickupPointResponseDto | null;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type IncomeRequest = {
    period: IncomeRequestPeriods;
    pagination?: PaginationParams;
};

export type IncomeRequestPeriods = 'day' | 'month' | 'year';

export type IncomeResponse = {
    date: string;
    income: number;
};

export type InventoryItemInfo = {
    medicine_type: number;
    medicine_name: string;
    left_amount: number;
};

export type Location = {
    /**
     * Latitude in degrees (-90 to 90).
     */
    latitude: number | null;
    /**
     * Longitude in degrees (-180 to 180).
     */
    longitude: number | null;
    country?: string | null;
    address?: string | null;
};

export type MachineConnection = {
    online: boolean;
};

export type MachineLocation = {
    /**
     * Latitude in degrees (-90 to 90).
     */
    latitude: number | null;
    /**
     * Longitude in degrees (-180 to 180).
     */
    longitude: number | null;
};

export type MachineMedicineSlotResponseDto = {
    id: string;
    machine_id: string;
    medicine_id: string;
    total_count: number;
    reserved_count: number;
};

export type MachinePickupPointResponseDto = {
    id: string;
    machine_id: string;
    pickup_point_id: string;
    arrival_at: string;
    departure_at: string;
    deliver_orders: boolean;
};

export type MachinePickupPointSearchDto = {
    column_filters: {
        [key: string]: unknown;
    };
    pagination?: PaginationParams;
    order_by: OrderByParams | null;
};

export type MachineResponseDto = {
    id: string;
    name: string;
    mac: string;
    location: MachineLocation;
    admin_user_id: string;
    status?: MachineStatus;
    last_maintenance_date?: string | null;
};

export type MachineStatisticResponseDto = {
    id: string;
    machine_id: string;
    info: {
        [key: string]: unknown;
    };
};

export type MachineStatisticSearchDto = {
    column_filters: {
        [key: string]: unknown;
    };
    pagination?: PaginationParams;
    order_by: OrderByParams | null;
};

export type MachineStatus = 1 | 2 | 3;

export type MachineStatusInfo = {
    mac: string;
    temperature: number;
    humidity: number;
    firmware_version: string;
    hardware_version: string;
    location: MachineLocation;
    inventory: {
        [key: string]: InventoryItemInfo;
    };
};

export type MedicineData = {
    id: string;
    name: string;
};

export type MedicineInfoDto = {
    id: string;
    count: number;
};

export type MedicineResponseDto = {
    id: string;
    type: MedicineType;
    name: string;
    description: string;
    price: number;
    currency: Currencies;
    prescription_needed: boolean;
    is_available: boolean;
};

export type MedicineSearchDto = {
    simple_filters?: CreateMedicineDtoPartial | null;
    search_substring?: string | null;
    pagination?: PaginationParams | null;
    order_by: OrderByParams | null;
};

export type MedicineType = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;

export type OrderByEnum = 'count' | 'sum_income';

export type OrderByParams = {
    order_by_column?: string;
    desc?: boolean;
};

export type OrderEvent = {
    status: OrderEventStatus;
    reason?: string | null;
};

export type OrderEventStatus = 'start' | 'fail' | 'success';

export type OrderMedicineResponseDto = {
    id: string;
    order_id: string;
    medicine_id: string;
    medicine_count: number;
    medicine?: MedicineResponseDto | null;
};

export type OrderResponseDto = {
    id: string;
    user_id: string;
    machine_id: string | null;
    pickup_point_id: string;
    status: OrderStatus;
    payment_currency: Currencies;
    medicines?: Array<MedicineInfoDto>;
    payment_amount: number;
    created_at: string;
    updated_at: string;
};

export type OrderStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;

export type PaginationParams = {
    offset?: number;
    limit?: number;
};

export type PickupPointData = {
    id: string;
    name: string;
};

export type PickupPointResponseDto = {
    id: string;
    location: Location;
    is_available: boolean;
};

export type PopularMedicinesResponse = {
    medicine: MedicineData;
    sort_value: number;
};

export type PopularPickupPointsResponse = {
    pickup_point: PickupPointData;
    sort_value: number;
};

export type PopularStatisticRequest = {
    start_date: string;
    end_date: string;
    order_by: OrderByEnum;
};

export type PutMachineDto = {
    name: string;
    mac: string;
    location: MachineLocation;
    admin_user_id: string;
    status?: MachineStatus;
    last_maintenance_date?: string | null;
};

export type PutMedicineDto = {
    type: MedicineType;
    name: string;
    description: string;
    price: number;
    currency: Currencies;
    prescription_needed: boolean;
    is_available: boolean;
};

export type PutOrderDto = {
    user_id: string;
    machine_id: string | null;
    pickup_point_id: string;
    status: OrderStatus;
    payment_currency: Currencies;
    medicines?: Array<MedicineInfoDto>;
};

export type PutOrderDtoPartial = {
    user_id?: string | null | null;
    machine_id?: string | null | null;
    pickup_point_id?: string | null | null;
    status?: OrderStatus | null | null;
    payment_currency?: Currencies | null | null;
    medicines?: Array<MedicineInfoDto>;
};

export type RegistrationRequest = {
    mac: string;
};

export type RouteOptimizationRequest = {
    machine_id: string;
    start: string;
    end: string;
};

export type RouteOptimizationResult = {
    machine_id: string;
    route: Array<RoutePickupPoint>;
    total_distance: number;
    total_time: number;
    created_at: string;
};

export type RoutePickupPoint = {
    id: string;
    travel_time: number;
    travel_distance: number;
};

export type SearchMachinesRequest = {
    simple_filters?: CreateMachineDtoPartial | null;
    medicines?: {
    [key: string]: (number);
} | null;
    pickup_point_stop?: string | null;
    pagination?: PaginationParams;
    order_by: OrderByParams | null;
};

export type UserCreate = {
    email: string;
    password: string;
    is_active?: boolean | null;
    is_superuser?: boolean | null;
    is_verified?: boolean | null;
    first_name: string;
    last_name: string;
    role?: UserRole | null;
    birthdate?: string | null;
};

export type UserResponse = {
    id: string;
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    is_verified?: boolean;
    first_name: string;
    last_name: string;
    role: UserRole;
    birthdate: string | null;
};

export type UserRole = 1 | 2 | 3;

export type UserUpdate = {
    password?: string | null;
    email?: string | null;
    is_active?: boolean | null;
    is_superuser?: boolean | null;
    is_verified?: boolean | null;
    first_name?: string | null;
    last_name?: string | null;
    role?: UserRole | null;
    birthdate?: string | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type SaveBackupApiV1BackupSavePostData = {
    acceptLanguage?: string;
    directoryPath: string;
};

export type SaveBackupApiV1BackupSavePostResponse = unknown;

export type RestoreBackupApiV1BackupRestorePostData = {
    acceptLanguage?: string;
    directoryPath: string;
};

export type RestoreBackupApiV1BackupRestorePostResponse = unknown;

export type DownloadBackupApiV1BackupDownloadGetData = {
    acceptLanguage?: string;
    directoryPath: string;
};

export type DownloadBackupApiV1BackupDownloadGetResponse = unknown;

export type UsersCurrentUserApiV1UsersMeGetData = {
    acceptLanguage?: string;
};

export type UsersCurrentUserApiV1UsersMeGetResponse = UserResponse;

export type UsersPatchCurrentUserApiV1UsersMePatchData = {
    acceptLanguage?: string;
    requestBody: UserUpdate;
};

export type UsersPatchCurrentUserApiV1UsersMePatchResponse = UserResponse;

export type UsersUserApiV1UsersIdGetData = {
    acceptLanguage?: string;
    id: string;
};

export type UsersUserApiV1UsersIdGetResponse = UserResponse;

export type UsersPatchUserApiV1UsersIdPatchData = {
    acceptLanguage?: string;
    id: string;
    requestBody: UserUpdate;
};

export type UsersPatchUserApiV1UsersIdPatchResponse = UserResponse;

export type UsersDeleteUserApiV1UsersIdDeleteData = {
    acceptLanguage?: string;
    id: string;
};

export type UsersDeleteUserApiV1UsersIdDeleteResponse = void;

export type AuthJwtLoginApiV1AuthJwtLoginPostData = {
    acceptLanguage?: string;
    formData: Body_auth_jwt_login_api_v1_auth_jwt_login_post;
};

export type AuthJwtLoginApiV1AuthJwtLoginPostResponse = BearerResponse;

export type AuthJwtLogoutApiV1AuthJwtLogoutPostData = {
    acceptLanguage?: string;
};

export type AuthJwtLogoutApiV1AuthJwtLogoutPostResponse = unknown;

export type ResetForgotPasswordApiV1AuthForgotPasswordPostData = {
    acceptLanguage?: string;
    requestBody: Body_reset_forgot_password_api_v1_auth_forgot_password_post;
};

export type ResetForgotPasswordApiV1AuthForgotPasswordPostResponse = unknown;

export type ResetResetPasswordApiV1AuthResetPasswordPostData = {
    acceptLanguage?: string;
    requestBody: Body_reset_reset_password_api_v1_auth_reset_password_post;
};

export type ResetResetPasswordApiV1AuthResetPasswordPostResponse = unknown;

export type RegisterRegisterApiV1AuthRegisterPostData = {
    acceptLanguage?: string;
    requestBody: UserCreate;
};

export type RegisterRegisterApiV1AuthRegisterPostResponse = UserResponse;

export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData = {
    acceptLanguage?: string;
    requestBody: Body_verify_request_token_api_v1_auth_request_verify_token_post;
};

export type VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse = unknown;

export type VerifyVerifyApiV1AuthVerifyPostData = {
    acceptLanguage?: string;
    requestBody: Body_verify_verify_api_v1_auth_verify_post;
};

export type VerifyVerifyApiV1AuthVerifyPostResponse = UserResponse;

export type CreateSlotApiV1MachinesMedicineSlotsPostData = {
    acceptLanguage?: string;
    requestBody: CreateMachineMedicineSlotDto;
};

export type CreateSlotApiV1MachinesMedicineSlotsPostResponse = MachineMedicineSlotResponseDto;

export type UpdateSlotApiV1MachinesMedicineSlotsSlotIdPutData = {
    acceptLanguage?: string;
    requestBody: CreateMachineMedicineSlotDtoPartial;
    slotId: string;
};

export type UpdateSlotApiV1MachinesMedicineSlotsSlotIdPutResponse = MachineMedicineSlotResponseDto;

export type GetSlotApiV1MachinesMedicineSlotsSlotIdGetData = {
    acceptLanguage?: string;
    slotId: string;
};

export type GetSlotApiV1MachinesMedicineSlotsSlotIdGetResponse = MachineMedicineSlotResponseDto;

export type DeleteSlotApiV1MachinesMedicineSlotsSlotIdDeleteData = {
    acceptLanguage?: string;
    slotId: string;
};

export type DeleteSlotApiV1MachinesMedicineSlotsSlotIdDeleteResponse = void;

export type SearchSlotsApiV1MachinesMedicineSlotsSearchPostData = {
    acceptLanguage?: string;
    requestBody: {
        [key: string]: unknown;
    };
};

export type SearchSlotsApiV1MachinesMedicineSlotsSearchPostResponse = Array<MachineMedicineSlotResponseDto>;

export type CreateStatisticApiV1MachinesStatisticsPostData = {
    acceptLanguage?: string;
    requestBody: CreateMachineStatisticDto;
};

export type CreateStatisticApiV1MachinesStatisticsPostResponse = MachineStatisticResponseDto;

export type GetStatisticApiV1MachinesStatisticsStatisticIdGetData = {
    acceptLanguage?: string;
    statisticId: string;
};

export type GetStatisticApiV1MachinesStatisticsStatisticIdGetResponse = MachineStatisticResponseDto;

export type SearchMachineStatisticsApiV1MachinesStatisticsSearchPostData = {
    acceptLanguage?: string;
    requestBody: MachineStatisticSearchDto;
};

export type SearchMachineStatisticsApiV1MachinesStatisticsSearchPostResponse = Array<MachineStatisticResponseDto>;

export type CreatePointApiV1MachinesPickupPointsPostData = {
    acceptLanguage?: string;
    requestBody: CreateMachinePickupPointDto;
};

export type CreatePointApiV1MachinesPickupPointsPostResponse = MachinePickupPointResponseDto;

export type PatchPointApiV1MachinesPickupPointsPointIdPatchData = {
    acceptLanguage?: string;
    pointId: string;
    requestBody: CreateMachinePickupPointDtoPartial;
};

export type PatchPointApiV1MachinesPickupPointsPointIdPatchResponse = MachinePickupPointResponseDto;

export type GetPointApiV1MachinesPickupPointsPointIdGetData = {
    acceptLanguage?: string;
    pointId: string;
};

export type GetPointApiV1MachinesPickupPointsPointIdGetResponse = MachinePickupPointResponseDto;

export type DeletePointApiV1MachinesPickupPointsPointIdDeleteData = {
    acceptLanguage?: string;
    pointId: string;
};

export type DeletePointApiV1MachinesPickupPointsPointIdDeleteResponse = void;

export type SearchPointsApiV1MachinesPickupPointsSearchPostData = {
    acceptLanguage?: string;
    requestBody: MachinePickupPointSearchDto;
};

export type SearchPointsApiV1MachinesPickupPointsSearchPostResponse = Array<MachinePickupPointResponseDto>;

export type CreateMachineApiV1MachinesPostData = {
    acceptLanguage?: string;
    requestBody: CreateMachineDto;
};

export type CreateMachineApiV1MachinesPostResponse = MachineResponseDto;

export type UpdateMachineApiV1MachinesMachineIdPutData = {
    acceptLanguage?: string;
    machineId: string;
    requestBody: PutMachineDto;
};

export type UpdateMachineApiV1MachinesMachineIdPutResponse = MachineResponseDto;

export type PatchMachineApiV1MachinesMachineIdPatchData = {
    acceptLanguage?: string;
    machineId: string;
    requestBody: CreateMachineDtoPartial;
};

export type PatchMachineApiV1MachinesMachineIdPatchResponse = MachineResponseDto;

export type GetMachineApiV1MachinesMachineIdGetData = {
    acceptLanguage?: string;
    machineId: string;
};

export type GetMachineApiV1MachinesMachineIdGetResponse = MachineResponseDto;

export type DeleteMachineApiV1MachinesMachineIdDeleteData = {
    acceptLanguage?: string;
    machineId: string;
};

export type DeleteMachineApiV1MachinesMachineIdDeleteResponse = void;

export type SearchMachinesApiV1MachinesSearchPostData = {
    acceptLanguage?: string;
    requestBody: SearchMachinesRequest;
};

export type SearchMachinesApiV1MachinesSearchPostResponse = Array<MachineResponseDto>;

export type CreateMedicineApiV1MedicinesPostData = {
    acceptLanguage?: string;
    requestBody: CreateMedicineDto;
};

export type CreateMedicineApiV1MedicinesPostResponse = MedicineResponseDto;

export type UpdateMedicineApiV1MedicinesMedicineIdPutData = {
    acceptLanguage?: string;
    medicineId: string;
    requestBody: PutMedicineDto;
};

export type UpdateMedicineApiV1MedicinesMedicineIdPutResponse = MedicineResponseDto;

export type PatchMedicineApiV1MedicinesMedicineIdPatchData = {
    acceptLanguage?: string;
    medicineId: string;
    requestBody: CreateMedicineDtoPartial;
};

export type PatchMedicineApiV1MedicinesMedicineIdPatchResponse = MedicineResponseDto;

export type GetMedicineApiV1MedicinesMedicineIdGetData = {
    acceptLanguage?: string;
    medicineId: string;
};

export type GetMedicineApiV1MedicinesMedicineIdGetResponse = MedicineResponseDto;

export type DeleteMedicineApiV1MedicinesMedicineIdDeleteData = {
    acceptLanguage?: string;
    medicineId: string;
};

export type DeleteMedicineApiV1MedicinesMedicineIdDeleteResponse = void;

export type SearchMedicinesApiV1MedicinesSearchPostData = {
    acceptLanguage?: string;
    requestBody: MedicineSearchDto;
};

export type SearchMedicinesApiV1MedicinesSearchPostResponse = Array<MedicineResponseDto>;

export type CreateOrderApiV1OrdersPostData = {
    acceptLanguage?: string;
    requestBody: CreateOrderDto;
};

export type CreateOrderApiV1OrdersPostResponse = OrderResponseDto;

export type UpdateOrderApiV1OrdersOrderIdPutData = {
    acceptLanguage?: string;
    orderId: string;
    requestBody: PutOrderDto;
};

export type UpdateOrderApiV1OrdersOrderIdPutResponse = OrderResponseDto;

export type PatchOrderApiV1OrdersOrderIdPatchData = {
    acceptLanguage?: string;
    orderId: string;
    requestBody: PutOrderDtoPartial;
};

export type PatchOrderApiV1OrdersOrderIdPatchResponse = OrderResponseDto;

export type GetOrderApiV1OrdersOrderIdGetData = {
    acceptLanguage?: string;
    orderId: string;
};

export type GetOrderApiV1OrdersOrderIdGetResponse = GetOrderByIdResponseDto;

export type DeleteOrderApiV1OrdersOrderIdDeleteData = {
    acceptLanguage?: string;
    orderId: string;
};

export type DeleteOrderApiV1OrdersOrderIdDeleteResponse = void;

export type SearchOrdersApiV1OrdersSearchPostData = {
    acceptLanguage?: string;
    requestBody: {
        [key: string]: unknown;
    };
};

export type SearchOrdersApiV1OrdersSearchPostResponse = Array<OrderResponseDto>;

export type GetIncomeApiV1AnalyticsIncomePostData = {
    acceptLanguage?: string;
    requestBody: IncomeRequest;
};

export type GetIncomeApiV1AnalyticsIncomePostResponse = Array<IncomeResponse>;

export type GetPopularMachinesApiV1AnalyticsPopularMachinesPostData = {
    acceptLanguage?: string;
    requestBody: PopularStatisticRequest;
};

export type GetPopularMachinesApiV1AnalyticsPopularMachinesPostResponse = Array<PopularPickupPointsResponse>;

export type GetPopularMedicinesApiV1AnalyticsPopularMedicinesPostData = {
    acceptLanguage?: string;
    requestBody: PopularStatisticRequest;
};

export type GetPopularMedicinesApiV1AnalyticsPopularMedicinesPostResponse = Array<PopularMedicinesResponse>;

export type GetPopularPickupPointApiV1AnalyticsPopularPickupPointsPostData = {
    acceptLanguage?: string;
    requestBody: PopularStatisticRequest;
};

export type GetPopularPickupPointApiV1AnalyticsPopularPickupPointsPostResponse = Array<PopularPickupPointsResponse>;

export type TestApiV1MqttHandlersTestPostData = {
    acceptLanguage?: string;
    requestBody: {
        [key: string]: unknown;
    };
};

export type TestApiV1MqttHandlersTestPostResponse = {
    [key: string]: unknown;
};

export type HandleOrderEventApiV1MqttHandlersOrderEventPostData = {
    acceptLanguage?: string;
    requestBody: BaseMessage_OrderEvent_;
};

export type HandleOrderEventApiV1MqttHandlersOrderEventPostResponse = {
    [key: string]: unknown;
};

export type HandleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPostData = {
    acceptLanguage?: string;
    requestBody: BaseMessage_MachineConnection_;
};

export type HandleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPostResponse = {
    [key: string]: unknown;
};

export type HandleMachineStatusInfoApiV1MqttHandlersMachineStatusPostData = {
    acceptLanguage?: string;
    requestBody: BaseMessage_MachineStatusInfo_;
};

export type HandleMachineStatusInfoApiV1MqttHandlersMachineStatusPostResponse = {
    [key: string]: unknown;
};

export type HandleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPostData = {
    acceptLanguage?: string;
    requestBody: BaseMessage_RegistrationRequest_;
};

export type HandleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPostResponse = {
    [key: string]: unknown;
};

export type GetGeneralLocalisationApiV1GeneralGeneralLocalePostData = {
    acceptLanguage?: string;
    locale: string;
};

export type GetGeneralLocalisationApiV1GeneralGeneralLocalePostResponse = {
    [key: string]: unknown;
};

export type CreatePointApiV1PickupPointsPostData = {
    acceptLanguage?: string;
    requestBody: CreatePickupPointDto;
};

export type CreatePointApiV1PickupPointsPostResponse = PickupPointResponseDto;

export type PatchPointApiV1PickupPointsMedicineIdPatchData = {
    acceptLanguage?: string;
    medicineId: string;
    requestBody: CreatePickupPointDtoPartial;
};

export type PatchPointApiV1PickupPointsMedicineIdPatchResponse = PickupPointResponseDto;

export type GetPointApiV1PickupPointsMedicineIdGetData = {
    acceptLanguage?: string;
    medicineId: string;
};

export type GetPointApiV1PickupPointsMedicineIdGetResponse = PickupPointResponseDto;

export type DeletePointApiV1PickupPointsMedicineIdDeleteData = {
    acceptLanguage?: string;
    medicineId: string;
};

export type DeletePointApiV1PickupPointsMedicineIdDeleteResponse = void;

export type SearchPointsApiV1PickupPointsSearchPostData = {
    acceptLanguage?: string;
    requestBody: {
        [key: string]: unknown;
    };
};

export type SearchPointsApiV1PickupPointsSearchPostResponse = Array<PickupPointResponseDto>;

export type OptimizeRouteApiV1PickupPointsOptimizePostData = {
    acceptLanguage?: string;
    requestBody: RouteOptimizationRequest;
};

export type OptimizeRouteApiV1PickupPointsOptimizePostResponse = RouteOptimizationResult;

export type CalculateDistanceApiV1PickupPointsGetDistancePostData = {
    acceptLanguage?: string;
    requestBody: CalculateDistanceRequest;
};

export type CalculateDistanceApiV1PickupPointsGetDistancePostResponse = DistanceTimeResponse;

export type TestApiV1TestGetData = {
    acceptLanguage?: string;
};

export type TestApiV1TestGetResponse = unknown;

export type AuthenticatedRouteApiV1TestAuthGetData = {
    acceptLanguage?: string;
};

export type AuthenticatedRouteApiV1TestAuthGetResponse = unknown;

export type $OpenApiTs = {
    '/api/v1/backup/save': {
        post: {
            req: SaveBackupApiV1BackupSavePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/backup/restore': {
        post: {
            req: RestoreBackupApiV1BackupRestorePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/backup/download': {
        get: {
            req: DownloadBackupApiV1BackupDownloadGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/me': {
        get: {
            req: UsersCurrentUserApiV1UsersMeGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserResponse;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: UsersPatchCurrentUserApiV1UsersMePatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserResponse;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/users/{id}': {
        get: {
            req: UsersUserApiV1UsersIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserResponse;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: UsersPatchUserApiV1UsersIdPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserResponse;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: UsersDeleteUserApiV1UsersIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Not a superuser.
                 */
                403: unknown;
                /**
                 * The user does not exist.
                 */
                404: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/jwt/login': {
        post: {
            req: AuthJwtLoginApiV1AuthJwtLoginPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: BearerResponse;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/jwt/logout': {
        post: {
            req: AuthJwtLogoutApiV1AuthJwtLogoutPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Missing token or inactive user.
                 */
                401: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/forgot-password': {
        post: {
            req: ResetForgotPasswordApiV1AuthForgotPasswordPostData;
            res: {
                /**
                 * Successful Response
                 */
                202: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/reset-password': {
        post: {
            req: ResetResetPasswordApiV1AuthResetPasswordPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/register': {
        post: {
            req: RegisterRegisterApiV1AuthRegisterPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: UserResponse;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/request-verify-token': {
        post: {
            req: VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData;
            res: {
                /**
                 * Successful Response
                 */
                202: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/auth/verify': {
        post: {
            req: VerifyVerifyApiV1AuthVerifyPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: UserResponse;
                /**
                 * Bad Request
                 */
                400: ErrorModel;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/medicine-slots/': {
        post: {
            req: CreateSlotApiV1MachinesMedicineSlotsPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: MachineMedicineSlotResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/medicine-slots/{slot_id}': {
        put: {
            req: UpdateSlotApiV1MachinesMedicineSlotsSlotIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachineMedicineSlotResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetSlotApiV1MachinesMedicineSlotsSlotIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachineMedicineSlotResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteSlotApiV1MachinesMedicineSlotsSlotIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/medicine-slots/search': {
        post: {
            req: SearchSlotsApiV1MachinesMedicineSlotsSearchPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<MachineMedicineSlotResponseDto>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/statistics/': {
        post: {
            req: CreateStatisticApiV1MachinesStatisticsPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: MachineStatisticResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/statistics/{statistic_id}': {
        get: {
            req: GetStatisticApiV1MachinesStatisticsStatisticIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachineStatisticResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/statistics/search': {
        post: {
            req: SearchMachineStatisticsApiV1MachinesStatisticsSearchPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<MachineStatisticResponseDto>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/pickup-points/': {
        post: {
            req: CreatePointApiV1MachinesPickupPointsPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: MachinePickupPointResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/pickup-points/{point_id}': {
        patch: {
            req: PatchPointApiV1MachinesPickupPointsPointIdPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachinePickupPointResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetPointApiV1MachinesPickupPointsPointIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachinePickupPointResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeletePointApiV1MachinesPickupPointsPointIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/pickup-points/search': {
        post: {
            req: SearchPointsApiV1MachinesPickupPointsSearchPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<MachinePickupPointResponseDto>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/': {
        post: {
            req: CreateMachineApiV1MachinesPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: MachineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/{machine_id}': {
        put: {
            req: UpdateMachineApiV1MachinesMachineIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchMachineApiV1MachinesMachineIdPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetMachineApiV1MachinesMachineIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: MachineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteMachineApiV1MachinesMachineIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/machines/search': {
        post: {
            req: SearchMachinesApiV1MachinesSearchPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<MachineResponseDto>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/medicines/': {
        post: {
            req: CreateMedicineApiV1MedicinesPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: MedicineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/medicines/{medicine_id}': {
        put: {
            req: UpdateMedicineApiV1MedicinesMedicineIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: MedicineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchMedicineApiV1MedicinesMedicineIdPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: MedicineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetMedicineApiV1MedicinesMedicineIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: MedicineResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteMedicineApiV1MedicinesMedicineIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/medicines/search': {
        post: {
            req: SearchMedicinesApiV1MedicinesSearchPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<MedicineResponseDto>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/orders/': {
        post: {
            req: CreateOrderApiV1OrdersPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: OrderResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/orders/{order_id}': {
        put: {
            req: UpdateOrderApiV1OrdersOrderIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: OrderResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchOrderApiV1OrdersOrderIdPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: OrderResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetOrderApiV1OrdersOrderIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: GetOrderByIdResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteOrderApiV1OrdersOrderIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/orders/search': {
        post: {
            req: SearchOrdersApiV1OrdersSearchPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<OrderResponseDto>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/analytics/income': {
        post: {
            req: GetIncomeApiV1AnalyticsIncomePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<IncomeResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/analytics/popular-machines': {
        post: {
            req: GetPopularMachinesApiV1AnalyticsPopularMachinesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<PopularPickupPointsResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/analytics/popular-medicines': {
        post: {
            req: GetPopularMedicinesApiV1AnalyticsPopularMedicinesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<PopularMedicinesResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/analytics/popular-pickup-points': {
        post: {
            req: GetPopularPickupPointApiV1AnalyticsPopularPickupPointsPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<PopularPickupPointsResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/mqtt-handlers/test': {
        post: {
            req: TestApiV1MqttHandlersTestPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/mqtt-handlers/order/event': {
        post: {
            req: HandleOrderEventApiV1MqttHandlersOrderEventPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/mqtt-handlers/machine/connection': {
        post: {
            req: HandleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/mqtt-handlers/machine/status': {
        post: {
            req: HandleMachineStatusInfoApiV1MqttHandlersMachineStatusPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/mqtt-handlers/machine/register/req': {
        post: {
            req: HandleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/general/general/{locale}': {
        post: {
            req: GetGeneralLocalisationApiV1GeneralGeneralLocalePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: {
                    [key: string]: unknown;
                };
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/pickup-points/': {
        post: {
            req: CreatePointApiV1PickupPointsPostData;
            res: {
                /**
                 * Successful Response
                 */
                201: PickupPointResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/pickup-points/{medicine_id}': {
        patch: {
            req: PatchPointApiV1PickupPointsMedicineIdPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: PickupPointResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetPointApiV1PickupPointsMedicineIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: PickupPointResponseDto;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeletePointApiV1PickupPointsMedicineIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                204: void;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/pickup-points/search': {
        post: {
            req: SearchPointsApiV1PickupPointsSearchPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<PickupPointResponseDto>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/pickup-points/optimize': {
        post: {
            req: OptimizeRouteApiV1PickupPointsOptimizePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: RouteOptimizationResult;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/pickup-points/get-distance': {
        post: {
            req: CalculateDistanceApiV1PickupPointsGetDistancePostData;
            res: {
                /**
                 * Successful Response
                 */
                200: DistanceTimeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/test': {
        get: {
            req: TestApiV1TestGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/api/v1/test-auth': {
        get: {
            req: AuthenticatedRouteApiV1TestAuthGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};