// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { SaveBackupApiV1BackupSavePostData, SaveBackupApiV1BackupSavePostResponse, RestoreBackupApiV1BackupRestorePostData, RestoreBackupApiV1BackupRestorePostResponse, DownloadBackupApiV1BackupDownloadGetData, DownloadBackupApiV1BackupDownloadGetResponse, UsersCurrentUserApiV1UsersMeGetData, UsersCurrentUserApiV1UsersMeGetResponse, UsersPatchCurrentUserApiV1UsersMePatchData, UsersPatchCurrentUserApiV1UsersMePatchResponse, UsersUserApiV1UsersIdGetData, UsersUserApiV1UsersIdGetResponse, UsersPatchUserApiV1UsersIdPatchData, UsersPatchUserApiV1UsersIdPatchResponse, UsersDeleteUserApiV1UsersIdDeleteData, UsersDeleteUserApiV1UsersIdDeleteResponse, AuthJwtLoginApiV1AuthJwtLoginPostData, AuthJwtLoginApiV1AuthJwtLoginPostResponse, AuthJwtLogoutApiV1AuthJwtLogoutPostData, AuthJwtLogoutApiV1AuthJwtLogoutPostResponse, ResetForgotPasswordApiV1AuthForgotPasswordPostData, ResetForgotPasswordApiV1AuthForgotPasswordPostResponse, ResetResetPasswordApiV1AuthResetPasswordPostData, ResetResetPasswordApiV1AuthResetPasswordPostResponse, RegisterRegisterApiV1AuthRegisterPostData, RegisterRegisterApiV1AuthRegisterPostResponse, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData, VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse, VerifyVerifyApiV1AuthVerifyPostData, VerifyVerifyApiV1AuthVerifyPostResponse, CreateSlotApiV1MachinesMedicineSlotsPostData, CreateSlotApiV1MachinesMedicineSlotsPostResponse, UpdateSlotApiV1MachinesMedicineSlotsSlotIdPutData, UpdateSlotApiV1MachinesMedicineSlotsSlotIdPutResponse, GetSlotApiV1MachinesMedicineSlotsSlotIdGetData, GetSlotApiV1MachinesMedicineSlotsSlotIdGetResponse, DeleteSlotApiV1MachinesMedicineSlotsSlotIdDeleteData, DeleteSlotApiV1MachinesMedicineSlotsSlotIdDeleteResponse, SearchSlotsApiV1MachinesMedicineSlotsSearchPostData, SearchSlotsApiV1MachinesMedicineSlotsSearchPostResponse, CreateStatisticApiV1MachinesStatisticsPostData, CreateStatisticApiV1MachinesStatisticsPostResponse, GetStatisticApiV1MachinesStatisticsStatisticIdGetData, GetStatisticApiV1MachinesStatisticsStatisticIdGetResponse, SearchMachineStatisticsApiV1MachinesStatisticsSearchPostData, SearchMachineStatisticsApiV1MachinesStatisticsSearchPostResponse, CreatePointApiV1MachinesPickupPointsPostData, CreatePointApiV1MachinesPickupPointsPostResponse, PatchPointApiV1MachinesPickupPointsPointIdPatchData, PatchPointApiV1MachinesPickupPointsPointIdPatchResponse, GetPointApiV1MachinesPickupPointsPointIdGetData, GetPointApiV1MachinesPickupPointsPointIdGetResponse, DeletePointApiV1MachinesPickupPointsPointIdDeleteData, DeletePointApiV1MachinesPickupPointsPointIdDeleteResponse, SearchPointsApiV1MachinesPickupPointsSearchPostData, SearchPointsApiV1MachinesPickupPointsSearchPostResponse, CreateMachineApiV1MachinesPostData, CreateMachineApiV1MachinesPostResponse, UpdateMachineApiV1MachinesMachineIdPutData, UpdateMachineApiV1MachinesMachineIdPutResponse, PatchMachineApiV1MachinesMachineIdPatchData, PatchMachineApiV1MachinesMachineIdPatchResponse, GetMachineApiV1MachinesMachineIdGetData, GetMachineApiV1MachinesMachineIdGetResponse, DeleteMachineApiV1MachinesMachineIdDeleteData, DeleteMachineApiV1MachinesMachineIdDeleteResponse, SearchMachinesApiV1MachinesSearchPostData, SearchMachinesApiV1MachinesSearchPostResponse, CreateMedicineApiV1MedicinesPostData, CreateMedicineApiV1MedicinesPostResponse, UpdateMedicineApiV1MedicinesMedicineIdPutData, UpdateMedicineApiV1MedicinesMedicineIdPutResponse, PatchMedicineApiV1MedicinesMedicineIdPatchData, PatchMedicineApiV1MedicinesMedicineIdPatchResponse, GetMedicineApiV1MedicinesMedicineIdGetData, GetMedicineApiV1MedicinesMedicineIdGetResponse, DeleteMedicineApiV1MedicinesMedicineIdDeleteData, DeleteMedicineApiV1MedicinesMedicineIdDeleteResponse, SearchMedicinesApiV1MedicinesSearchPostData, SearchMedicinesApiV1MedicinesSearchPostResponse, CreateOrderApiV1OrdersPostData, CreateOrderApiV1OrdersPostResponse, UpdateOrderApiV1OrdersOrderIdPutData, UpdateOrderApiV1OrdersOrderIdPutResponse, PatchOrderApiV1OrdersOrderIdPatchData, PatchOrderApiV1OrdersOrderIdPatchResponse, GetOrderApiV1OrdersOrderIdGetData, GetOrderApiV1OrdersOrderIdGetResponse, DeleteOrderApiV1OrdersOrderIdDeleteData, DeleteOrderApiV1OrdersOrderIdDeleteResponse, SearchOrdersApiV1OrdersSearchPostData, SearchOrdersApiV1OrdersSearchPostResponse, GetIncomeApiV1AnalyticsIncomePostData, GetIncomeApiV1AnalyticsIncomePostResponse, GetPopularMachinesApiV1AnalyticsPopularMachinesPostData, GetPopularMachinesApiV1AnalyticsPopularMachinesPostResponse, GetPopularMedicinesApiV1AnalyticsPopularMedicinesPostData, GetPopularMedicinesApiV1AnalyticsPopularMedicinesPostResponse, GetPopularPickupPointApiV1AnalyticsPopularPickupPointsPostData, GetPopularPickupPointApiV1AnalyticsPopularPickupPointsPostResponse, TestApiV1MqttHandlersTestPostData, TestApiV1MqttHandlersTestPostResponse, HandleOrderEventApiV1MqttHandlersOrderEventPostData, HandleOrderEventApiV1MqttHandlersOrderEventPostResponse, HandleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPostData, HandleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPostResponse, HandleMachineStatusInfoApiV1MqttHandlersMachineStatusPostData, HandleMachineStatusInfoApiV1MqttHandlersMachineStatusPostResponse, HandleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPostData, HandleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPostResponse, GetGeneralLocalisationApiV1GeneralGeneralLocalePostData, GetGeneralLocalisationApiV1GeneralGeneralLocalePostResponse, CreatePointApiV1PickupPointsPostData, CreatePointApiV1PickupPointsPostResponse, PatchPointApiV1PickupPointsMedicineIdPatchData, PatchPointApiV1PickupPointsMedicineIdPatchResponse, GetPointApiV1PickupPointsMedicineIdGetData, GetPointApiV1PickupPointsMedicineIdGetResponse, DeletePointApiV1PickupPointsMedicineIdDeleteData, DeletePointApiV1PickupPointsMedicineIdDeleteResponse, SearchPointsApiV1PickupPointsSearchPostData, SearchPointsApiV1PickupPointsSearchPostResponse, OptimizeRouteApiV1PickupPointsOptimizePostData, OptimizeRouteApiV1PickupPointsOptimizePostResponse, CalculateDistanceApiV1PickupPointsGetDistancePostData, CalculateDistanceApiV1PickupPointsGetDistancePostResponse, TestApiV1TestGetData, TestApiV1TestGetResponse, AuthenticatedRouteApiV1TestAuthGetData, AuthenticatedRouteApiV1TestAuthGetResponse } from './types.gen';

/**
 * Save Backup
 * @param data The data for the request.
 * @param data.directoryPath
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const saveBackupApiV1BackupSavePost = (data: SaveBackupApiV1BackupSavePostData): CancelablePromise<SaveBackupApiV1BackupSavePostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/backup/save',
    headers: {
        'accept-language': data.acceptLanguage
    },
    query: {
        directory_path: data.directoryPath
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Restore Backup
 * @param data The data for the request.
 * @param data.directoryPath
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const restoreBackupApiV1BackupRestorePost = (data: RestoreBackupApiV1BackupRestorePostData): CancelablePromise<RestoreBackupApiV1BackupRestorePostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/backup/restore',
    headers: {
        'accept-language': data.acceptLanguage
    },
    query: {
        directory_path: data.directoryPath
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Download Backup
 * @param data The data for the request.
 * @param data.directoryPath
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const downloadBackupApiV1BackupDownloadGet = (data: DownloadBackupApiV1BackupDownloadGetData): CancelablePromise<DownloadBackupApiV1BackupDownloadGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/backup/download',
    headers: {
        'accept-language': data.acceptLanguage
    },
    query: {
        directory_path: data.directoryPath
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Users:Current User
 * @param data The data for the request.
 * @param data.acceptLanguage
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const usersCurrentUserApiV1UsersMeGet = (data: UsersCurrentUserApiV1UsersMeGetData = {}): CancelablePromise<UsersCurrentUserApiV1UsersMeGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/me',
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        401: 'Missing token or inactive user.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:Patch Current User
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const usersPatchCurrentUserApiV1UsersMePatch = (data: UsersPatchCurrentUserApiV1UsersMePatchData): CancelablePromise<UsersPatchCurrentUserApiV1UsersMePatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/me',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Missing token or inactive user.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:User
 * @param data The data for the request.
 * @param data.id
 * @param data.acceptLanguage
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const usersUserApiV1UsersIdGet = (data: UsersUserApiV1UsersIdGetData): CancelablePromise<UsersUserApiV1UsersIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/users/{id}',
    path: {
        id: data.id
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:Patch User
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const usersPatchUserApiV1UsersIdPatch = (data: UsersPatchUserApiV1UsersIdPatchData): CancelablePromise<UsersPatchUserApiV1UsersIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/users/{id}',
    path: {
        id: data.id
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:Delete User
 * @param data The data for the request.
 * @param data.id
 * @param data.acceptLanguage
 * @returns void Successful Response
 * @throws ApiError
 */
export const usersDeleteUserApiV1UsersIdDelete = (data: UsersDeleteUserApiV1UsersIdDeleteData): CancelablePromise<UsersDeleteUserApiV1UsersIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/users/{id}',
    path: {
        id: data.id
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Auth:Jwt.Login
 * @param data The data for the request.
 * @param data.formData
 * @param data.acceptLanguage
 * @returns BearerResponse Successful Response
 * @throws ApiError
 */
export const authJwtLoginApiV1AuthJwtLoginPost = (data: AuthJwtLoginApiV1AuthJwtLoginPostData): CancelablePromise<AuthJwtLoginApiV1AuthJwtLoginPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/jwt/login',
    headers: {
        'accept-language': data.acceptLanguage
    },
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Auth:Jwt.Logout
 * @param data The data for the request.
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authJwtLogoutApiV1AuthJwtLogoutPost = (data: AuthJwtLogoutApiV1AuthJwtLogoutPostData = {}): CancelablePromise<AuthJwtLogoutApiV1AuthJwtLogoutPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/jwt/logout',
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        401: 'Missing token or inactive user.',
        422: 'Validation Error'
    }
}); };

/**
 * Reset:Forgot Password
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const resetForgotPasswordApiV1AuthForgotPasswordPost = (data: ResetForgotPasswordApiV1AuthForgotPasswordPostData): CancelablePromise<ResetForgotPasswordApiV1AuthForgotPasswordPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/forgot-password',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Reset:Reset Password
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const resetResetPasswordApiV1AuthResetPasswordPost = (data: ResetResetPasswordApiV1AuthResetPasswordPostData): CancelablePromise<ResetResetPasswordApiV1AuthResetPasswordPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/reset-password',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Register:Register
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const registerRegisterApiV1AuthRegisterPost = (data: RegisterRegisterApiV1AuthRegisterPostData): CancelablePromise<RegisterRegisterApiV1AuthRegisterPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/register',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Verify:Request-Token
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const verifyRequestTokenApiV1AuthRequestVerifyTokenPost = (data: VerifyRequestTokenApiV1AuthRequestVerifyTokenPostData): CancelablePromise<VerifyRequestTokenApiV1AuthRequestVerifyTokenPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/request-verify-token',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Verify:Verify
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns UserResponse Successful Response
 * @throws ApiError
 */
export const verifyVerifyApiV1AuthVerifyPost = (data: VerifyVerifyApiV1AuthVerifyPostData): CancelablePromise<VerifyVerifyApiV1AuthVerifyPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/auth/verify',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Create Slot
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineMedicineSlotResponseDto Successful Response
 * @throws ApiError
 */
export const createSlotApiV1MachinesMedicineSlotsPost = (data: CreateSlotApiV1MachinesMedicineSlotsPostData): CancelablePromise<CreateSlotApiV1MachinesMedicineSlotsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/medicine-slots/',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Slot
 * @param data The data for the request.
 * @param data.slotId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineMedicineSlotResponseDto Successful Response
 * @throws ApiError
 */
export const updateSlotApiV1MachinesMedicineSlotsSlotIdPut = (data: UpdateSlotApiV1MachinesMedicineSlotsSlotIdPutData): CancelablePromise<UpdateSlotApiV1MachinesMedicineSlotsSlotIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/machines/medicine-slots/{slot_id}',
    path: {
        slot_id: data.slotId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Slot
 * @param data The data for the request.
 * @param data.slotId
 * @param data.acceptLanguage
 * @returns MachineMedicineSlotResponseDto Successful Response
 * @throws ApiError
 */
export const getSlotApiV1MachinesMedicineSlotsSlotIdGet = (data: GetSlotApiV1MachinesMedicineSlotsSlotIdGetData): CancelablePromise<GetSlotApiV1MachinesMedicineSlotsSlotIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/machines/medicine-slots/{slot_id}',
    path: {
        slot_id: data.slotId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Slot
 * @param data The data for the request.
 * @param data.slotId
 * @param data.acceptLanguage
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteSlotApiV1MachinesMedicineSlotsSlotIdDelete = (data: DeleteSlotApiV1MachinesMedicineSlotsSlotIdDeleteData): CancelablePromise<DeleteSlotApiV1MachinesMedicineSlotsSlotIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/machines/medicine-slots/{slot_id}',
    path: {
        slot_id: data.slotId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Slots
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineMedicineSlotResponseDto Successful Response
 * @throws ApiError
 */
export const searchSlotsApiV1MachinesMedicineSlotsSearchPost = (data: SearchSlotsApiV1MachinesMedicineSlotsSearchPostData): CancelablePromise<SearchSlotsApiV1MachinesMedicineSlotsSearchPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/medicine-slots/search',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Statistic
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineStatisticResponseDto Successful Response
 * @throws ApiError
 */
export const createStatisticApiV1MachinesStatisticsPost = (data: CreateStatisticApiV1MachinesStatisticsPostData): CancelablePromise<CreateStatisticApiV1MachinesStatisticsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/statistics/',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Statistic
 * @param data The data for the request.
 * @param data.statisticId
 * @param data.acceptLanguage
 * @returns MachineStatisticResponseDto Successful Response
 * @throws ApiError
 */
export const getStatisticApiV1MachinesStatisticsStatisticIdGet = (data: GetStatisticApiV1MachinesStatisticsStatisticIdGetData): CancelablePromise<GetStatisticApiV1MachinesStatisticsStatisticIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/machines/statistics/{statistic_id}',
    path: {
        statistic_id: data.statisticId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Machine Statistics
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineStatisticResponseDto Successful Response
 * @throws ApiError
 */
export const searchMachineStatisticsApiV1MachinesStatisticsSearchPost = (data: SearchMachineStatisticsApiV1MachinesStatisticsSearchPostData): CancelablePromise<SearchMachineStatisticsApiV1MachinesStatisticsSearchPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/statistics/search',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Point
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachinePickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const createPointApiV1MachinesPickupPointsPost = (data: CreatePointApiV1MachinesPickupPointsPostData): CancelablePromise<CreatePointApiV1MachinesPickupPointsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/pickup-points/',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Patch Point
 * @param data The data for the request.
 * @param data.pointId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachinePickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const patchPointApiV1MachinesPickupPointsPointIdPatch = (data: PatchPointApiV1MachinesPickupPointsPointIdPatchData): CancelablePromise<PatchPointApiV1MachinesPickupPointsPointIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/machines/pickup-points/{point_id}',
    path: {
        point_id: data.pointId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Point
 * @param data The data for the request.
 * @param data.pointId
 * @param data.acceptLanguage
 * @returns MachinePickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const getPointApiV1MachinesPickupPointsPointIdGet = (data: GetPointApiV1MachinesPickupPointsPointIdGetData): CancelablePromise<GetPointApiV1MachinesPickupPointsPointIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/machines/pickup-points/{point_id}',
    path: {
        point_id: data.pointId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Point
 * @param data The data for the request.
 * @param data.pointId
 * @param data.acceptLanguage
 * @returns void Successful Response
 * @throws ApiError
 */
export const deletePointApiV1MachinesPickupPointsPointIdDelete = (data: DeletePointApiV1MachinesPickupPointsPointIdDeleteData): CancelablePromise<DeletePointApiV1MachinesPickupPointsPointIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/machines/pickup-points/{point_id}',
    path: {
        point_id: data.pointId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Points
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachinePickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const searchPointsApiV1MachinesPickupPointsSearchPost = (data: SearchPointsApiV1MachinesPickupPointsSearchPostData): CancelablePromise<SearchPointsApiV1MachinesPickupPointsSearchPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/pickup-points/search',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Machine
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineResponseDto Successful Response
 * @throws ApiError
 */
export const createMachineApiV1MachinesPost = (data: CreateMachineApiV1MachinesPostData): CancelablePromise<CreateMachineApiV1MachinesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Machine
 * @param data The data for the request.
 * @param data.machineId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineResponseDto Successful Response
 * @throws ApiError
 */
export const updateMachineApiV1MachinesMachineIdPut = (data: UpdateMachineApiV1MachinesMachineIdPutData): CancelablePromise<UpdateMachineApiV1MachinesMachineIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/machines/{machine_id}',
    path: {
        machine_id: data.machineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Patch Machine
 * @param data The data for the request.
 * @param data.machineId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineResponseDto Successful Response
 * @throws ApiError
 */
export const patchMachineApiV1MachinesMachineIdPatch = (data: PatchMachineApiV1MachinesMachineIdPatchData): CancelablePromise<PatchMachineApiV1MachinesMachineIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/machines/{machine_id}',
    path: {
        machine_id: data.machineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Machine
 * @param data The data for the request.
 * @param data.machineId
 * @param data.acceptLanguage
 * @returns MachineResponseDto Successful Response
 * @throws ApiError
 */
export const getMachineApiV1MachinesMachineIdGet = (data: GetMachineApiV1MachinesMachineIdGetData): CancelablePromise<GetMachineApiV1MachinesMachineIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/machines/{machine_id}',
    path: {
        machine_id: data.machineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Machine
 * @param data The data for the request.
 * @param data.machineId
 * @param data.acceptLanguage
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteMachineApiV1MachinesMachineIdDelete = (data: DeleteMachineApiV1MachinesMachineIdDeleteData): CancelablePromise<DeleteMachineApiV1MachinesMachineIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/machines/{machine_id}',
    path: {
        machine_id: data.machineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Machines
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MachineResponseDto Successful Response
 * @throws ApiError
 */
export const searchMachinesApiV1MachinesSearchPost = (data: SearchMachinesApiV1MachinesSearchPostData): CancelablePromise<SearchMachinesApiV1MachinesSearchPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/machines/search',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Medicine
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MedicineResponseDto Successful Response
 * @throws ApiError
 */
export const createMedicineApiV1MedicinesPost = (data: CreateMedicineApiV1MedicinesPostData): CancelablePromise<CreateMedicineApiV1MedicinesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/medicines/',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Medicine
 * @param data The data for the request.
 * @param data.medicineId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MedicineResponseDto Successful Response
 * @throws ApiError
 */
export const updateMedicineApiV1MedicinesMedicineIdPut = (data: UpdateMedicineApiV1MedicinesMedicineIdPutData): CancelablePromise<UpdateMedicineApiV1MedicinesMedicineIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/medicines/{medicine_id}',
    path: {
        medicine_id: data.medicineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Patch Medicine
 * @param data The data for the request.
 * @param data.medicineId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MedicineResponseDto Successful Response
 * @throws ApiError
 */
export const patchMedicineApiV1MedicinesMedicineIdPatch = (data: PatchMedicineApiV1MedicinesMedicineIdPatchData): CancelablePromise<PatchMedicineApiV1MedicinesMedicineIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/medicines/{medicine_id}',
    path: {
        medicine_id: data.medicineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Medicine
 * @param data The data for the request.
 * @param data.medicineId
 * @param data.acceptLanguage
 * @returns MedicineResponseDto Successful Response
 * @throws ApiError
 */
export const getMedicineApiV1MedicinesMedicineIdGet = (data: GetMedicineApiV1MedicinesMedicineIdGetData): CancelablePromise<GetMedicineApiV1MedicinesMedicineIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/medicines/{medicine_id}',
    path: {
        medicine_id: data.medicineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Medicine
 * @param data The data for the request.
 * @param data.medicineId
 * @param data.acceptLanguage
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteMedicineApiV1MedicinesMedicineIdDelete = (data: DeleteMedicineApiV1MedicinesMedicineIdDeleteData): CancelablePromise<DeleteMedicineApiV1MedicinesMedicineIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/medicines/{medicine_id}',
    path: {
        medicine_id: data.medicineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Medicines
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns MedicineResponseDto Successful Response
 * @throws ApiError
 */
export const searchMedicinesApiV1MedicinesSearchPost = (data: SearchMedicinesApiV1MedicinesSearchPostData): CancelablePromise<SearchMedicinesApiV1MedicinesSearchPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/medicines/search',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Order
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns OrderResponseDto Successful Response
 * @throws ApiError
 */
export const createOrderApiV1OrdersPost = (data: CreateOrderApiV1OrdersPostData): CancelablePromise<CreateOrderApiV1OrdersPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/orders/',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Order
 * @param data The data for the request.
 * @param data.orderId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns OrderResponseDto Successful Response
 * @throws ApiError
 */
export const updateOrderApiV1OrdersOrderIdPut = (data: UpdateOrderApiV1OrdersOrderIdPutData): CancelablePromise<UpdateOrderApiV1OrdersOrderIdPutResponse> => { return __request(OpenAPI, {
    method: 'PUT',
    url: '/api/v1/orders/{order_id}',
    path: {
        order_id: data.orderId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Patch Order
 * @param data The data for the request.
 * @param data.orderId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns OrderResponseDto Successful Response
 * @throws ApiError
 */
export const patchOrderApiV1OrdersOrderIdPatch = (data: PatchOrderApiV1OrdersOrderIdPatchData): CancelablePromise<PatchOrderApiV1OrdersOrderIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/orders/{order_id}',
    path: {
        order_id: data.orderId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Order
 * @param data The data for the request.
 * @param data.orderId
 * @param data.acceptLanguage
 * @returns GetOrderByIdResponseDto Successful Response
 * @throws ApiError
 */
export const getOrderApiV1OrdersOrderIdGet = (data: GetOrderApiV1OrdersOrderIdGetData): CancelablePromise<GetOrderApiV1OrdersOrderIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/orders/{order_id}',
    path: {
        order_id: data.orderId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Order
 * @param data The data for the request.
 * @param data.orderId
 * @param data.acceptLanguage
 * @returns void Successful Response
 * @throws ApiError
 */
export const deleteOrderApiV1OrdersOrderIdDelete = (data: DeleteOrderApiV1OrdersOrderIdDeleteData): CancelablePromise<DeleteOrderApiV1OrdersOrderIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/orders/{order_id}',
    path: {
        order_id: data.orderId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Orders
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns OrderResponseDto Successful Response
 * @throws ApiError
 */
export const searchOrdersApiV1OrdersSearchPost = (data: SearchOrdersApiV1OrdersSearchPostData): CancelablePromise<SearchOrdersApiV1OrdersSearchPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/orders/search',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Income
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns IncomeResponse Successful Response
 * @throws ApiError
 */
export const getIncomeApiV1AnalyticsIncomePost = (data: GetIncomeApiV1AnalyticsIncomePostData): CancelablePromise<GetIncomeApiV1AnalyticsIncomePostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/analytics/income',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Popular Machines
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns PopularPickupPointsResponse Successful Response
 * @throws ApiError
 */
export const getPopularMachinesApiV1AnalyticsPopularMachinesPost = (data: GetPopularMachinesApiV1AnalyticsPopularMachinesPostData): CancelablePromise<GetPopularMachinesApiV1AnalyticsPopularMachinesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/analytics/popular-machines',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Popular Medicines
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns PopularMedicinesResponse Successful Response
 * @throws ApiError
 */
export const getPopularMedicinesApiV1AnalyticsPopularMedicinesPost = (data: GetPopularMedicinesApiV1AnalyticsPopularMedicinesPostData): CancelablePromise<GetPopularMedicinesApiV1AnalyticsPopularMedicinesPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/analytics/popular-medicines',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Popular Pickup Point
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns PopularPickupPointsResponse Successful Response
 * @throws ApiError
 */
export const getPopularPickupPointApiV1AnalyticsPopularPickupPointsPost = (data: GetPopularPickupPointApiV1AnalyticsPopularPickupPointsPostData): CancelablePromise<GetPopularPickupPointApiV1AnalyticsPopularPickupPointsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/analytics/popular-pickup-points',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Test
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const testApiV1MqttHandlersTestPost = (data: TestApiV1MqttHandlersTestPostData): CancelablePromise<TestApiV1MqttHandlersTestPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/mqtt-handlers/test',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Handle Order Event
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const handleOrderEventApiV1MqttHandlersOrderEventPost = (data: HandleOrderEventApiV1MqttHandlersOrderEventPostData): CancelablePromise<HandleOrderEventApiV1MqttHandlersOrderEventPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/mqtt-handlers/order/event',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Handle Machine Connection Update
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const handleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPost = (data: HandleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPostData): CancelablePromise<HandleMachineConnectionUpdateApiV1MqttHandlersMachineConnectionPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/mqtt-handlers/machine/connection',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Handle Machine Status Info
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const handleMachineStatusInfoApiV1MqttHandlersMachineStatusPost = (data: HandleMachineStatusInfoApiV1MqttHandlersMachineStatusPostData): CancelablePromise<HandleMachineStatusInfoApiV1MqttHandlersMachineStatusPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/mqtt-handlers/machine/status',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Handle Machine Registration Request
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const handleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPost = (data: HandleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPostData): CancelablePromise<HandleMachineRegistrationRequestApiV1MqttHandlersMachineRegisterReqPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/mqtt-handlers/machine/register/req',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get General Localisation
 * @param data The data for the request.
 * @param data.locale
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const getGeneralLocalisationApiV1GeneralGeneralLocalePost = (data: GetGeneralLocalisationApiV1GeneralGeneralLocalePostData): CancelablePromise<GetGeneralLocalisationApiV1GeneralGeneralLocalePostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/general/general/{locale}',
    path: {
        locale: data.locale
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Point
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns PickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const createPointApiV1PickupPointsPost = (data: CreatePointApiV1PickupPointsPostData): CancelablePromise<CreatePointApiV1PickupPointsPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/pickup-points/',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Patch Point
 * @param data The data for the request.
 * @param data.medicineId
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns PickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const patchPointApiV1PickupPointsMedicineIdPatch = (data: PatchPointApiV1PickupPointsMedicineIdPatchData): CancelablePromise<PatchPointApiV1PickupPointsMedicineIdPatchResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/api/v1/pickup-points/{medicine_id}',
    path: {
        medicine_id: data.medicineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Point
 * @param data The data for the request.
 * @param data.medicineId
 * @param data.acceptLanguage
 * @returns PickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const getPointApiV1PickupPointsMedicineIdGet = (data: GetPointApiV1PickupPointsMedicineIdGetData): CancelablePromise<GetPointApiV1PickupPointsMedicineIdGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/pickup-points/{medicine_id}',
    path: {
        medicine_id: data.medicineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Point
 * @param data The data for the request.
 * @param data.medicineId
 * @param data.acceptLanguage
 * @returns void Successful Response
 * @throws ApiError
 */
export const deletePointApiV1PickupPointsMedicineIdDelete = (data: DeletePointApiV1PickupPointsMedicineIdDeleteData): CancelablePromise<DeletePointApiV1PickupPointsMedicineIdDeleteResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/api/v1/pickup-points/{medicine_id}',
    path: {
        medicine_id: data.medicineId
    },
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Points
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns PickupPointResponseDto Successful Response
 * @throws ApiError
 */
export const searchPointsApiV1PickupPointsSearchPost = (data: SearchPointsApiV1PickupPointsSearchPostData): CancelablePromise<SearchPointsApiV1PickupPointsSearchPostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/pickup-points/search',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Optimize Route
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns RouteOptimizationResult Successful Response
 * @throws ApiError
 */
export const optimizeRouteApiV1PickupPointsOptimizePost = (data: OptimizeRouteApiV1PickupPointsOptimizePostData): CancelablePromise<OptimizeRouteApiV1PickupPointsOptimizePostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/pickup-points/optimize',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Calculate Distance
 * @param data The data for the request.
 * @param data.requestBody
 * @param data.acceptLanguage
 * @returns DistanceTimeResponse Successful Response
 * @throws ApiError
 */
export const calculateDistanceApiV1PickupPointsGetDistancePost = (data: CalculateDistanceApiV1PickupPointsGetDistancePostData): CancelablePromise<CalculateDistanceApiV1PickupPointsGetDistancePostResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/api/v1/pickup-points/get-distance',
    headers: {
        'accept-language': data.acceptLanguage
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Test
 * @param data The data for the request.
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const testApiV1TestGet = (data: TestApiV1TestGetData = {}): CancelablePromise<TestApiV1TestGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/test',
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Authenticated Route
 * @param data The data for the request.
 * @param data.acceptLanguage
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authenticatedRouteApiV1TestAuthGet = (data: AuthenticatedRouteApiV1TestAuthGetData = {}): CancelablePromise<AuthenticatedRouteApiV1TestAuthGetResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/api/v1/test-auth',
    headers: {
        'accept-language': data.acceptLanguage
    },
    errors: {
        422: 'Validation Error'
    }
}); };