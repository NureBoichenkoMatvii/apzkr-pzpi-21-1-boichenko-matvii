// This file is auto-generated by @hey-api/openapi-ts

export const $BaseMessage_MachineConnection_ = {
    properties: {
        topic: {
            type: 'string',
            title: 'Topic'
        },
        qos: {
            type: 'integer',
            title: 'Qos',
            default: 0
        },
        timestamp: {
            type: 'number',
            title: 'Timestamp'
        },
        msg_timestamp: {
            type: 'number',
            title: 'Msg Timestamp'
        },
        payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MachineConnection'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['topic', 'timestamp', 'msg_timestamp'],
    title: 'BaseMessage[MachineConnection]'
} as const;

export const $BaseMessage_MachineStatusInfo_ = {
    properties: {
        topic: {
            type: 'string',
            title: 'Topic'
        },
        qos: {
            type: 'integer',
            title: 'Qos',
            default: 0
        },
        timestamp: {
            type: 'number',
            title: 'Timestamp'
        },
        msg_timestamp: {
            type: 'number',
            title: 'Msg Timestamp'
        },
        payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MachineStatusInfo'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['topic', 'timestamp', 'msg_timestamp'],
    title: 'BaseMessage[MachineStatusInfo]'
} as const;

export const $BaseMessage_OrderEvent_ = {
    properties: {
        topic: {
            type: 'string',
            title: 'Topic'
        },
        qos: {
            type: 'integer',
            title: 'Qos',
            default: 0
        },
        timestamp: {
            type: 'number',
            title: 'Timestamp'
        },
        msg_timestamp: {
            type: 'number',
            title: 'Msg Timestamp'
        },
        payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrderEvent'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['topic', 'timestamp', 'msg_timestamp'],
    title: 'BaseMessage[OrderEvent]'
} as const;

export const $BaseMessage_RegistrationRequest_ = {
    properties: {
        topic: {
            type: 'string',
            title: 'Topic'
        },
        qos: {
            type: 'integer',
            title: 'Qos',
            default: 0
        },
        timestamp: {
            type: 'number',
            title: 'Timestamp'
        },
        msg_timestamp: {
            type: 'number',
            title: 'Msg Timestamp'
        },
        payload: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RegistrationRequest'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['topic', 'timestamp', 'msg_timestamp'],
    title: 'BaseMessage[RegistrationRequest]'
} as const;

export const $BearerResponse = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type'
        }
    },
    type: 'object',
    required: ['access_token', 'token_type'],
    title: 'BearerResponse'
} as const;

export const $Body_auth_jwt_login_api_v1_auth_jwt_login_post = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_auth_jwt_login_api_v1_auth_jwt_login_post'
} as const;

export const $Body_reset_forgot_password_api_v1_auth_forgot_password_post = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_reset_forgot_password_api_v1_auth_forgot_password_post'
} as const;

export const $Body_reset_reset_password_api_v1_auth_reset_password_post = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['token', 'password'],
    title: 'Body_reset_reset_password_api_v1_auth_reset_password_post'
} as const;

export const $Body_verify_request_token_api_v1_auth_request_verify_token_post = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_verify_request_token_api_v1_auth_request_verify_token_post'
} as const;

export const $Body_verify_verify_api_v1_auth_verify_post = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'Body_verify_verify_api_v1_auth_verify_post'
} as const;

export const $CalculateDistanceRequest = {
    properties: {
        pickup_point1_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point1 Id'
        },
        pickup_point2_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point2 Id'
        }
    },
    type: 'object',
    required: ['pickup_point1_id', 'pickup_point2_id'],
    title: 'CalculateDistanceRequest'
} as const;

export const $CreateMachineDto = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        mac: {
            type: 'string',
            title: 'Mac'
        },
        location: {
            '$ref': '#/components/schemas/MachineLocation'
        },
        admin_user_id: {
            type: 'string',
            format: 'uuid',
            title: 'Admin User Id'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/MachineStatus'
                }
            ],
            default: 1
        },
        last_maintenance_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Maintenance Date'
        }
    },
    type: 'object',
    required: ['name', 'mac', 'location', 'admin_user_id'],
    title: 'CreateMachineDto'
} as const;

export const $CreateMachineDtoPartial = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            nullable: true
        },
        mac: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mac',
            nullable: true
        },
        location: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MachineLocation'
                },
                {
                    type: 'null'
                }
            ],
            nullable: true
        },
        admin_user_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Admin User Id',
            nullable: true
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/MachineStatus'
                }
            ],
            default: 1
        },
        last_maintenance_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Maintenance Date'
        }
    },
    type: 'object',
    title: 'CreateMachineDtoPartial'
} as const;

export const $CreateMachineMedicineSlotDto = {
    properties: {
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        medicine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Medicine Id'
        },
        total_count: {
            type: 'integer',
            title: 'Total Count'
        },
        reserved_count: {
            type: 'integer',
            title: 'Reserved Count'
        }
    },
    type: 'object',
    required: ['machine_id', 'medicine_id', 'total_count', 'reserved_count'],
    title: 'CreateMachineMedicineSlotDto'
} as const;

export const $CreateMachineMedicineSlotDtoPartial = {
    properties: {
        machine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id',
            nullable: true
        },
        medicine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Medicine Id',
            nullable: true
        },
        total_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Count',
            nullable: true
        },
        reserved_count: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reserved Count',
            nullable: true
        }
    },
    type: 'object',
    title: 'CreateMachineMedicineSlotDtoPartial'
} as const;

export const $CreateMachinePickupPointDto = {
    properties: {
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        pickup_point_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point Id'
        },
        arrival_at: {
            type: 'string',
            format: 'date-time',
            title: 'Arrival At'
        },
        departure_at: {
            type: 'string',
            format: 'date-time',
            title: 'Departure At'
        },
        deliver_orders: {
            type: 'boolean',
            title: 'Deliver Orders'
        }
    },
    type: 'object',
    required: ['machine_id', 'pickup_point_id', 'arrival_at', 'departure_at', 'deliver_orders'],
    title: 'CreateMachinePickupPointDto'
} as const;

export const $CreateMachinePickupPointDtoPartial = {
    properties: {
        machine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id',
            nullable: true
        },
        pickup_point_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pickup Point Id',
            nullable: true
        },
        arrival_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Arrival At',
            nullable: true
        },
        departure_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Departure At',
            nullable: true
        },
        deliver_orders: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Deliver Orders',
            nullable: true
        }
    },
    type: 'object',
    title: 'CreateMachinePickupPointDtoPartial'
} as const;

export const $CreateMachineStatisticDto = {
    properties: {
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        info: {
            type: 'object',
            title: 'Info'
        }
    },
    type: 'object',
    required: ['machine_id', 'info'],
    title: 'CreateMachineStatisticDto'
} as const;

export const $CreateMedicineDto = {
    properties: {
        type: {
            '$ref': '#/components/schemas/MedicineType'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        price: {
            type: 'number',
            title: 'Price'
        },
        currency: {
            '$ref': '#/components/schemas/Currencies'
        },
        prescription_needed: {
            type: 'boolean',
            title: 'Prescription Needed'
        },
        is_available: {
            type: 'boolean',
            title: 'Is Available'
        }
    },
    type: 'object',
    required: ['type', 'name', 'description', 'price', 'currency', 'prescription_needed', 'is_available'],
    title: 'CreateMedicineDto'
} as const;

export const $CreateMedicineDtoPartial = {
    properties: {
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MedicineType'
                },
                {
                    type: 'null'
                }
            ],
            nullable: true
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name',
            nullable: true
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description',
            nullable: true
        },
        price: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price',
            nullable: true
        },
        currency: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Currencies'
                },
                {
                    type: 'null'
                }
            ],
            nullable: true
        },
        prescription_needed: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prescription Needed',
            nullable: true
        },
        is_available: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Available',
            nullable: true
        }
    },
    type: 'object',
    title: 'CreateMedicineDtoPartial'
} as const;

export const $CreateOrderDto = {
    properties: {
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id'
        },
        pickup_point_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point Id'
        },
        status: {
            '$ref': '#/components/schemas/OrderStatus'
        },
        payment_currency: {
            '$ref': '#/components/schemas/Currencies'
        },
        medicines: {
            items: {
                '$ref': '#/components/schemas/MedicineInfoDto'
            },
            type: 'array',
            title: 'Medicines',
            default: []
        }
    },
    type: 'object',
    required: ['user_id', 'machine_id', 'pickup_point_id', 'status', 'payment_currency'],
    title: 'CreateOrderDto'
} as const;

export const $CreatePickupPointDto = {
    properties: {
        location: {
            '$ref': '#/components/schemas/Location'
        },
        is_available: {
            type: 'boolean',
            title: 'Is Available'
        }
    },
    type: 'object',
    required: ['location', 'is_available'],
    title: 'CreatePickupPointDto'
} as const;

export const $CreatePickupPointDtoPartial = {
    properties: {
        location: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Location'
                },
                {
                    type: 'null'
                }
            ],
            nullable: true
        },
        is_available: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Available',
            nullable: true
        }
    },
    type: 'object',
    title: 'CreatePickupPointDtoPartial'
} as const;

export const $Currencies = {
    type: 'string',
    enum: ['USD', 'EUR', 'UAH'],
    title: 'Currencies'
} as const;

export const $DistanceTimeResponse = {
    properties: {
        distance: {
            type: 'number',
            title: 'Distance'
        },
        time_hours: {
            type: 'number',
            title: 'Time Hours'
        }
    },
    type: 'object',
    required: ['distance', 'time_hours'],
    title: 'DistanceTimeResponse'
} as const;

export const $ErrorModel = {
    properties: {
        detail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                }
            ],
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'ErrorModel'
} as const;

export const $GetOrderByIdResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id'
        },
        pickup_point_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point Id'
        },
        status: {
            '$ref': '#/components/schemas/OrderStatus'
        },
        payment_currency: {
            '$ref': '#/components/schemas/Currencies'
        },
        medicines: {
            items: {
                '$ref': '#/components/schemas/MedicineInfoDto'
            },
            type: 'array',
            title: 'Medicines',
            default: []
        },
        payment_amount: {
            type: 'number',
            title: 'Payment Amount'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        order_medicines: {
            items: {
                '$ref': '#/components/schemas/OrderMedicineResponseDto'
            },
            type: 'array',
            title: 'Order Medicines'
        },
        pickup_point: {
            '$ref': '#/components/schemas/PickupPointResponseDto'
        },
        machine: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MachineResponseDto'
                },
                {
                    type: 'null'
                }
            ]
        },
        machine_pickup_point: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MachinePickupPointResponseDto'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'machine_id', 'pickup_point_id', 'status', 'payment_currency', 'payment_amount', 'created_at', 'updated_at', 'order_medicines', 'pickup_point'],
    title: 'GetOrderByIdResponseDto'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $IncomeRequest = {
    properties: {
        period: {
            '$ref': '#/components/schemas/IncomeRequestPeriods'
        },
        pagination: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaginationParams'
                }
            ],
            default: {
                offset: 0,
                limit: 5
            }
        }
    },
    type: 'object',
    required: ['period'],
    title: 'IncomeRequest'
} as const;

export const $IncomeRequestPeriods = {
    type: 'string',
    enum: ['day', 'month', 'year'],
    title: 'IncomeRequestPeriods'
} as const;

export const $IncomeResponse = {
    properties: {
        date: {
            type: 'string',
            format: 'date-time',
            title: 'Date'
        },
        income: {
            type: 'number',
            title: 'Income'
        }
    },
    type: 'object',
    required: ['date', 'income'],
    title: 'IncomeResponse'
} as const;

export const $InventoryItemInfo = {
    properties: {
        medicine_type: {
            type: 'integer',
            title: 'Medicine Type'
        },
        medicine_name: {
            type: 'string',
            title: 'Medicine Name'
        },
        left_amount: {
            type: 'integer',
            title: 'Left Amount'
        }
    },
    type: 'object',
    required: ['medicine_type', 'medicine_name', 'left_amount'],
    title: 'InventoryItemInfo'
} as const;

export const $Location = {
    properties: {
        latitude: {
            anyOf: [
                {
                    type: 'number',
                    exclusiveMaximum: 90,
                    exclusiveMinimum: -90
                },
                {
                    type: 'null'
                }
            ],
            title: 'Latitude',
            description: 'Latitude in degrees (-90 to 90).'
        },
        longitude: {
            anyOf: [
                {
                    type: 'number',
                    exclusiveMaximum: 180,
                    exclusiveMinimum: -180
                },
                {
                    type: 'null'
                }
            ],
            title: 'Longitude',
            description: 'Longitude in degrees (-180 to 180).'
        },
        country: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Country'
        },
        address: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address'
        }
    },
    type: 'object',
    required: ['latitude', 'longitude'],
    title: 'Location'
} as const;

export const $MachineConnection = {
    properties: {
        online: {
            type: 'boolean',
            title: 'Online'
        }
    },
    type: 'object',
    required: ['online'],
    title: 'MachineConnection'
} as const;

export const $MachineLocation = {
    properties: {
        latitude: {
            anyOf: [
                {
                    type: 'number',
                    exclusiveMaximum: 90,
                    exclusiveMinimum: -90
                },
                {
                    type: 'null'
                }
            ],
            title: 'Latitude',
            description: 'Latitude in degrees (-90 to 90).'
        },
        longitude: {
            anyOf: [
                {
                    type: 'number',
                    exclusiveMaximum: 180,
                    exclusiveMinimum: -180
                },
                {
                    type: 'null'
                }
            ],
            title: 'Longitude',
            description: 'Longitude in degrees (-180 to 180).'
        }
    },
    type: 'object',
    required: ['latitude', 'longitude'],
    title: 'MachineLocation'
} as const;

export const $MachineMedicineSlotResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        medicine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Medicine Id'
        },
        total_count: {
            type: 'integer',
            title: 'Total Count'
        },
        reserved_count: {
            type: 'integer',
            title: 'Reserved Count'
        }
    },
    type: 'object',
    required: ['id', 'machine_id', 'medicine_id', 'total_count', 'reserved_count'],
    title: 'MachineMedicineSlotResponseDto'
} as const;

export const $MachinePickupPointResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        pickup_point_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point Id'
        },
        arrival_at: {
            type: 'string',
            format: 'date-time',
            title: 'Arrival At'
        },
        departure_at: {
            type: 'string',
            format: 'date-time',
            title: 'Departure At'
        },
        deliver_orders: {
            type: 'boolean',
            title: 'Deliver Orders'
        }
    },
    type: 'object',
    required: ['id', 'machine_id', 'pickup_point_id', 'arrival_at', 'departure_at', 'deliver_orders'],
    title: 'MachinePickupPointResponseDto'
} as const;

export const $MachinePickupPointSearchDto = {
    properties: {
        column_filters: {
            type: 'object',
            title: 'Column Filters'
        },
        pagination: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaginationParams'
                }
            ],
            default: {
                offset: 0,
                limit: 5
            }
        },
        order_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrderByParams'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['column_filters', 'order_by'],
    title: 'MachinePickupPointSearchDto'
} as const;

export const $MachineResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        mac: {
            type: 'string',
            title: 'Mac'
        },
        location: {
            '$ref': '#/components/schemas/MachineLocation'
        },
        admin_user_id: {
            type: 'string',
            format: 'uuid',
            title: 'Admin User Id'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/MachineStatus'
                }
            ],
            default: 1
        },
        last_maintenance_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Maintenance Date'
        }
    },
    type: 'object',
    required: ['id', 'name', 'mac', 'location', 'admin_user_id'],
    title: 'MachineResponseDto'
} as const;

export const $MachineStatisticResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        info: {
            type: 'object',
            title: 'Info'
        }
    },
    type: 'object',
    required: ['id', 'machine_id', 'info'],
    title: 'MachineStatisticResponseDto'
} as const;

export const $MachineStatisticSearchDto = {
    properties: {
        column_filters: {
            type: 'object',
            title: 'Column Filters'
        },
        pagination: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaginationParams'
                }
            ],
            default: {
                offset: 0,
                limit: 5
            }
        },
        order_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrderByParams'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['column_filters', 'order_by'],
    title: 'MachineStatisticSearchDto'
} as const;

export const $MachineStatus = {
    type: 'integer',
    enum: [1, 2, 3],
    title: 'MachineStatus'
} as const;

export const $MachineStatusInfo = {
    properties: {
        mac: {
            type: 'string',
            title: 'Mac'
        },
        temperature: {
            type: 'integer',
            title: 'Temperature'
        },
        humidity: {
            type: 'integer',
            title: 'Humidity'
        },
        firmware_version: {
            type: 'string',
            title: 'Firmware Version'
        },
        hardware_version: {
            type: 'string',
            title: 'Hardware Version'
        },
        location: {
            '$ref': '#/components/schemas/MachineLocation'
        },
        inventory: {
            additionalProperties: {
                '$ref': '#/components/schemas/InventoryItemInfo'
            },
            type: 'object',
            title: 'Inventory'
        }
    },
    type: 'object',
    required: ['mac', 'temperature', 'humidity', 'firmware_version', 'hardware_version', 'location', 'inventory'],
    title: 'MachineStatusInfo'
} as const;

export const $MedicineData = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['id', 'name'],
    title: 'MedicineData'
} as const;

export const $MedicineInfoDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['id', 'count'],
    title: 'MedicineInfoDto'
} as const;

export const $MedicineResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/MedicineType'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        price: {
            type: 'number',
            title: 'Price'
        },
        currency: {
            '$ref': '#/components/schemas/Currencies'
        },
        prescription_needed: {
            type: 'boolean',
            title: 'Prescription Needed'
        },
        is_available: {
            type: 'boolean',
            title: 'Is Available'
        }
    },
    type: 'object',
    required: ['id', 'type', 'name', 'description', 'price', 'currency', 'prescription_needed', 'is_available'],
    title: 'MedicineResponseDto'
} as const;

export const $MedicineSearchDto = {
    properties: {
        simple_filters: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CreateMedicineDtoPartial'
                },
                {
                    type: 'null'
                }
            ]
        },
        search_substring: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Search Substring'
        },
        pagination: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PaginationParams'
                },
                {
                    type: 'null'
                }
            ],
            default: {
                offset: 0,
                limit: 5
            }
        },
        order_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrderByParams'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['order_by'],
    title: 'MedicineSearchDto'
} as const;

export const $MedicineType = {
    type: 'integer',
    enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    title: 'MedicineType'
} as const;

export const $OrderByEnum = {
    type: 'string',
    enum: ['count', 'sum_income'],
    title: 'OrderByEnum'
} as const;

export const $OrderByParams = {
    properties: {
        order_by_column: {
            type: 'string',
            title: 'Order By Column',
            default: 'id'
        },
        desc: {
            type: 'boolean',
            title: 'Desc',
            default: false
        }
    },
    type: 'object',
    title: 'OrderByParams'
} as const;

export const $OrderEvent = {
    properties: {
        status: {
            '$ref': '#/components/schemas/OrderEventStatus'
        },
        reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reason'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'OrderEvent'
} as const;

export const $OrderEventStatus = {
    type: 'string',
    enum: ['start', 'fail', 'success'],
    title: 'OrderEventStatus'
} as const;

export const $OrderMedicineResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        order_id: {
            type: 'string',
            format: 'uuid',
            title: 'Order Id'
        },
        medicine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Medicine Id'
        },
        medicine_count: {
            type: 'integer',
            title: 'Medicine Count'
        },
        medicine: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MedicineResponseDto'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'order_id', 'medicine_id', 'medicine_count'],
    title: 'OrderMedicineResponseDto'
} as const;

export const $OrderResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id'
        },
        pickup_point_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point Id'
        },
        status: {
            '$ref': '#/components/schemas/OrderStatus'
        },
        payment_currency: {
            '$ref': '#/components/schemas/Currencies'
        },
        medicines: {
            items: {
                '$ref': '#/components/schemas/MedicineInfoDto'
            },
            type: 'array',
            title: 'Medicines',
            default: []
        },
        payment_amount: {
            type: 'number',
            title: 'Payment Amount'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'machine_id', 'pickup_point_id', 'status', 'payment_currency', 'payment_amount', 'created_at', 'updated_at'],
    title: 'OrderResponseDto'
} as const;

export const $OrderStatus = {
    type: 'integer',
    enum: [0, 1, 2, 3, 4, 5, 6],
    title: 'OrderStatus'
} as const;

export const $PaginationParams = {
    properties: {
        offset: {
            type: 'integer',
            title: 'Offset',
            default: 0
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            default: 5
        }
    },
    type: 'object',
    title: 'PaginationParams'
} as const;

export const $PickupPointData = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['id', 'name'],
    title: 'PickupPointData'
} as const;

export const $PickupPointResponseDto = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        location: {
            '$ref': '#/components/schemas/Location'
        },
        is_available: {
            type: 'boolean',
            title: 'Is Available'
        }
    },
    type: 'object',
    required: ['id', 'location', 'is_available'],
    title: 'PickupPointResponseDto'
} as const;

export const $PopularMedicinesResponse = {
    properties: {
        medicine: {
            '$ref': '#/components/schemas/MedicineData'
        },
        sort_value: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Sort Value'
        }
    },
    type: 'object',
    required: ['medicine', 'sort_value'],
    title: 'PopularMedicinesResponse'
} as const;

export const $PopularPickupPointsResponse = {
    properties: {
        pickup_point: {
            '$ref': '#/components/schemas/PickupPointData'
        },
        sort_value: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'number'
                }
            ],
            title: 'Sort Value'
        }
    },
    type: 'object',
    required: ['pickup_point', 'sort_value'],
    title: 'PopularPickupPointsResponse'
} as const;

export const $PopularStatisticRequest = {
    properties: {
        start_date: {
            type: 'string',
            format: 'date-time',
            title: 'Start Date'
        },
        end_date: {
            type: 'string',
            format: 'date-time',
            title: 'End Date'
        },
        order_by: {
            '$ref': '#/components/schemas/OrderByEnum'
        }
    },
    type: 'object',
    required: ['start_date', 'end_date', 'order_by'],
    title: 'PopularStatisticRequest'
} as const;

export const $PutMachineDto = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        mac: {
            type: 'string',
            title: 'Mac'
        },
        location: {
            '$ref': '#/components/schemas/MachineLocation'
        },
        admin_user_id: {
            type: 'string',
            format: 'uuid',
            title: 'Admin User Id'
        },
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/MachineStatus'
                }
            ],
            default: 1
        },
        last_maintenance_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Maintenance Date'
        }
    },
    type: 'object',
    required: ['name', 'mac', 'location', 'admin_user_id'],
    title: 'PutMachineDto'
} as const;

export const $PutMedicineDto = {
    properties: {
        type: {
            '$ref': '#/components/schemas/MedicineType'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        price: {
            type: 'number',
            title: 'Price'
        },
        currency: {
            '$ref': '#/components/schemas/Currencies'
        },
        prescription_needed: {
            type: 'boolean',
            title: 'Prescription Needed'
        },
        is_available: {
            type: 'boolean',
            title: 'Is Available'
        }
    },
    type: 'object',
    required: ['type', 'name', 'description', 'price', 'currency', 'prescription_needed', 'is_available'],
    title: 'PutMedicineDto'
} as const;

export const $PutOrderDto = {
    properties: {
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id'
        },
        pickup_point_id: {
            type: 'string',
            format: 'uuid',
            title: 'Pickup Point Id'
        },
        status: {
            '$ref': '#/components/schemas/OrderStatus'
        },
        payment_currency: {
            '$ref': '#/components/schemas/Currencies'
        },
        medicines: {
            items: {
                '$ref': '#/components/schemas/MedicineInfoDto'
            },
            type: 'array',
            title: 'Medicines',
            default: []
        }
    },
    type: 'object',
    required: ['user_id', 'machine_id', 'pickup_point_id', 'status', 'payment_currency'],
    title: 'PutOrderDto'
} as const;

export const $PutOrderDtoPartial = {
    properties: {
        user_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id',
            nullable: true
        },
        machine_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Machine Id',
            nullable: true
        },
        pickup_point_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pickup Point Id',
            nullable: true
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrderStatus'
                },
                {
                    type: 'null'
                }
            ],
            nullable: true
        },
        payment_currency: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Currencies'
                },
                {
                    type: 'null'
                }
            ],
            nullable: true
        },
        medicines: {
            items: {
                '$ref': '#/components/schemas/MedicineInfoDto'
            },
            type: 'array',
            title: 'Medicines',
            default: []
        }
    },
    type: 'object',
    title: 'PutOrderDtoPartial'
} as const;

export const $RegistrationRequest = {
    properties: {
        mac: {
            type: 'string',
            title: 'Mac'
        }
    },
    type: 'object',
    required: ['mac'],
    title: 'RegistrationRequest'
} as const;

export const $RouteOptimizationRequest = {
    properties: {
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        }
    },
    type: 'object',
    required: ['machine_id', 'start', 'end'],
    title: 'RouteOptimizationRequest'
} as const;

export const $RouteOptimizationResult = {
    properties: {
        machine_id: {
            type: 'string',
            format: 'uuid',
            title: 'Machine Id'
        },
        route: {
            items: {
                '$ref': '#/components/schemas/RoutePickupPoint'
            },
            type: 'array',
            title: 'Route'
        },
        total_distance: {
            type: 'number',
            title: 'Total Distance'
        },
        total_time: {
            type: 'number',
            title: 'Total Time'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        }
    },
    type: 'object',
    required: ['machine_id', 'route', 'total_distance', 'total_time', 'created_at'],
    title: 'RouteOptimizationResult'
} as const;

export const $RoutePickupPoint = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        travel_time: {
            type: 'integer',
            title: 'Travel Time'
        },
        travel_distance: {
            type: 'integer',
            title: 'Travel Distance'
        }
    },
    type: 'object',
    required: ['id', 'travel_time', 'travel_distance'],
    title: 'RoutePickupPoint'
} as const;

export const $SearchMachinesRequest = {
    properties: {
        simple_filters: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CreateMachineDtoPartial'
                },
                {
                    type: 'null'
                }
            ]
        },
        medicines: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'integer'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Medicines'
        },
        pickup_point_stop: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pickup Point Stop'
        },
        pagination: {
            allOf: [
                {
                    '$ref': '#/components/schemas/PaginationParams'
                }
            ],
            default: {
                offset: 0,
                limit: 5
            }
        },
        order_by: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/OrderByParams'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['order_by'],
    title: 'SearchMachinesRequest'
} as const;

export const $UserCreate = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified',
            default: false
        },
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        },
        role: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UserRole'
                },
                {
                    type: 'null'
                }
            ]
        },
        birthdate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthdate'
        }
    },
    type: 'object',
    required: ['email', 'password', 'first_name', 'last_name'],
    title: 'UserCreate'
} as const;

export const $UserResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        },
        first_name: {
            type: 'string',
            title: 'First Name'
        },
        last_name: {
            type: 'string',
            title: 'Last Name'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        },
        birthdate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthdate'
        }
    },
    type: 'object',
    required: ['id', 'email', 'first_name', 'last_name', 'role', 'birthdate'],
    title: 'UserResponse'
} as const;

export const $UserRole = {
    type: 'integer',
    enum: [1, 2, 3],
    title: 'UserRole'
} as const;

export const $UserUpdate = {
    properties: {
        password: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified'
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        role: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UserRole'
                },
                {
                    type: 'null'
                }
            ]
        },
        birthdate: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthdate'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;