"""Init

Revision ID: 3d8eb985f9f3
Revises: 
Create Date: 2024-05-19 22:40:16.766904

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3d8eb985f9f3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('medicine',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('type', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('currency', sa.String(length=30), nullable=False),
    sa.Column('prescription_needed', sa.Boolean(), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', 'type', name='uix_name_type'),
    schema='medmobile'
    )
    op.create_table('pickup_point',
    sa.Column('location', sa.JSON(), nullable=False),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='medmobile'
    )
    op.create_table('user',
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('birthdate', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('role', sa.Integer(), nullable=False),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='medmobile'
    )
    op.create_index(op.f('ix_medmobile_user_email'), 'user', ['email'], unique=True, schema='medmobile')
    op.create_table('machine',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('mac', sa.String(length=100), nullable=True),
    sa.Column('location', sa.JSON(), nullable=False),
    sa.Column('admin_user_id', sa.UUID(), nullable=False),
    sa.Column('is_online', sa.Boolean(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('last_maintenance_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['admin_user_id'], ['medmobile.user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('mac'),
    schema='medmobile'
    )
    op.create_table('machine_medicine_slot',
    sa.Column('machine_id', sa.UUID(), nullable=False),
    sa.Column('medicine_id', sa.UUID(), nullable=False),
    sa.Column('total_count', sa.Integer(), nullable=False),
    sa.Column('reserved_count', sa.Integer(), nullable=False),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['machine_id'], ['medmobile.machine.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['medicine_id'], ['medmobile.medicine.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='medmobile'
    )
    op.create_table('machine_pickup_point',
    sa.Column('machine_id', sa.UUID(), nullable=False),
    sa.Column('pickup_point_id', sa.UUID(), nullable=False),
    sa.Column('arrival_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('departure_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('deliver_orders', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['machine_id'], ['medmobile.machine.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['pickup_point_id'], ['medmobile.pickup_point.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='medmobile'
    )
    op.create_table('machine_statistic',
    sa.Column('machine_id', sa.UUID(), nullable=False),
    sa.Column('info', sa.JSON(), nullable=False),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['machine_id'], ['medmobile.machine.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='medmobile'
    )
    op.create_table('order',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('machine_id', sa.UUID(), nullable=True),
    sa.Column('pickup_point_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('payment_amount', sa.Float(), nullable=False),
    sa.Column('payment_currency', sa.String(length=30), nullable=False),
    sa.Column('payment_date', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['machine_id'], ['medmobile.machine.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['pickup_point_id'], ['medmobile.pickup_point.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['medmobile.user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='medmobile'
    )
    op.create_table('order_medicine',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('medicine_id', sa.UUID(), nullable=False),
    sa.Column('medicine_count', sa.Integer(), nullable=False),
    sa.Column('id', sa.Uuid(), server_default=sa.text('uuid_generate_v4()'), nullable=False),
    sa.Column('_deleted', sa.Boolean(), server_default='FALSE', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['medicine_id'], ['medmobile.medicine.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['order_id'], ['medmobile.order.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='medmobile'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('order_medicine', schema='medmobile')
    op.drop_table('order', schema='medmobile')
    op.drop_table('machine_statistic', schema='medmobile')
    op.drop_table('machine_pickup_point', schema='medmobile')
    op.drop_table('machine_medicine_slot', schema='medmobile')
    op.drop_table('machine', schema='medmobile')
    op.drop_index(op.f('ix_medmobile_user_email'), table_name='user', schema='medmobile')
    op.drop_table('user', schema='medmobile')
    op.drop_table('pickup_point', schema='medmobile')
    op.drop_table('medicine', schema='medmobile')
    # ### end Alembic commands ###
